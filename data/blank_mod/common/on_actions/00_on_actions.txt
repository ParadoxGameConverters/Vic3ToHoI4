on_actions = {

	# Ace pilots
	# country, FROM = ace
	on_ace_promoted = {
		random_events = {
			100 = ace_promoted.1
			5 = ace_promoted.2
		}
	}

	# country, FROM = ace, PREV = enemy ace
	# This event fires twice, once for each ace.
	on_aces_killed_each_other = {
		random_events = {
			100 = aces_killed_each_other.1
		}
	}

	# country, FROM = our ace,
	# PREV = enemy ace, has killed FROM
	on_ace_killed_by_ace = {
		random_events = {
			100 = ace_killed_by_ace.1
		}
	}

	# country, FROM = our ace,
	# PREV = enemy ace, killed by FROM
	on_ace_killed_other_ace = {
		random_events = {
			100 = ace_killed_other_ace.1
		}
	}

	# our ace is killed by no name
	# country, FROM = ace
	on_ace_killed = {
		random_events = {
			100 = ace_died.1
		}
	}

	# our ace died in accident
	# country, FROM = ace
	on_ace_killed_on_accident = {

	}

	# enemy ace is killed by our non name
	# country, FROM = enemy ace
	on_non_ace_killed_other_ace = {
	
	}

	# During justifying wargoals
	# triggered daily, so make sure there is a sink somewhere not firing events
	# country, FROM = target nation
	#on_justifying_wargoal_pulse
	#Moved to 99_converter_on_actions.txt

	on_wargoal_expire = {
		random_events = {
			100 = war_justification.301
		}
	}

	on_nuke_drop = {

		effect = {
			set_global_flag = first_nuke_dropped
			if = {
				limit = { NOT = { has_global_flag = first_nuke_dropped } }
				country_event = { id = generic.8 }
			}
			if = {
				limit = { has_idea = race_for_the_bomb_outclassed }
				remove_ideas = race_for_the_bomb_outclassed
			}
			if = {
				limit = { NOT = { has_country_flag = achievement_has_dropped_nuke } }
				goto_state = FROM
				set_country_flag = achievement_has_dropped_nuke
			}
			# Removed "Duce Nuke'd Em" because tied to Vanilla settings
			news_event = { id = nuke_dropped.2 days = 1}
			news_event = { id = nuke_dropped.3 days = 1}
			news_event = { id = nuke_dropped.4 days = 1}
			news_event = { id = nuke_dropped.5 days = 1}
			news_event = { id = nuke_dropped.6 days = 1}
			news_event = { id = nuke_dropped.7 days = 1}
			news_event = { id = nuke_dropped.8 days = 1}
			news_event = { id = nuke_dropped.9 days = 1}
			news_event = { id = nuke_dropped.10 days = 1}
			news_event = { id = nuke_dropped.11 days = 1}
			news_event = { id = nuke_dropped.12 days = 1}
			news_event = { id = nuke_dropped.13 days = 1}
		}
		random_events = {
			100 = nuke_dropped.0
		}
	}

	# country random events
	#on_bi_yearly_pulse = {
	#
	#}

	#on_five_year_pulse = {
	#
	#}

	on_border_war_lost = {
		effect = {
			owner = {
				country_event = { id = china.14 }
				country_event = { id = china.16 }
			}
		}
	}
	
	on_leave_faction = {
		effect = {
			FROM = {
				add_opinion_modifier = {
					modifier = faction_traitor
					target = ROOT
					days = 365
				}
			
				add_opinion_modifier = {
					modifier = faction_traitor_trade
					target = ROOT
					days = 365
				}
			}
		}
	}

	#FROM is the one that joins the faction
	on_create_faction = {
		effect = {
			# Sunset invasion check
			if = {
				limit = {
					FROM = { is_puppet = no }
					OR = {
						AND = {
							FROM = {
								capital_scope = {
									NOT = { is_on_continent = south_america }
								}
							}
						}
						AND = {
							capital_scope = {
								NOT = { is_on_continent = south_america }
							}
						}
					}
				}
				set_country_flag = achievement_failed_sunset_invasion
			}
		}
	}

	#FROM is country getting invited.
	on_offer_join_faction = {
		effect = {
			#Give achievement to nation joining a faction, but not in one from game start
			if = {
				limit = {
					date > 1936.01.02
				}
				FROM = {
					if = {
						limit = {
							is_faction_leader = no
						}
					}
				}
			}
			#Remove anti_soviet_pact if joining commie Soviet in faction
	
			# Sunset invasion check
			if = {
				limit = {
					is_puppet = no
					OR = {
						AND = {
							FROM = {
								capital_scope = {
									NOT = { is_on_continent = south_america }
								}
							}
						}
						AND = {
							capital_scope = {
								NOT = { is_on_continent = south_america }
							}
						}
					}
				}
				set_country_flag = achievement_failed_sunset_invasion
			}			
		}
	}

	#FROM is faction leader on join faction requests. THIS DOES NOT FIRE ON ADD_TO_FACTION EFFECT! USE ON_OFFER_JOIN_FACTION!
	on_join_faction = {
		effect = {
			#Remove anti_soviet_pact if joining commie Soviet in faction

			# Sunset invasion check
			if = {
				limit = {
					is_puppet = no
					OR = {
						AND = {
							FROM = {
								capital_scope = {
									NOT = { is_on_continent = south_america }
								}
							}
						}
						AND = {
							capital_scope = {
								NOT = { is_on_continent = south_america }
							}
						}
					}
				}
				set_country_flag = achievement_failed_sunset_invasion
			}

			# Romania shouldn't declare war on Bulgaria on historical mode, if both are going to join the Axis
			# Removed because based on HoI4 Vanilla
		}
	}

	#FROM is war target
	on_declare_war = {
		effect = {
			#If prepared by siphoning equipment, receive equipment back
			if = {
				limit = {
					FROM = {
						has_civil_war = yes
						has_country_flag = siphoned_equipment_stockpiles_for_civil_war
					}
					has_civil_war = yes
				}
				FROM = {
					clr_country_flag = siphoned_equipment_stockpiles_for_civil_war
					add_equipment_to_stockpile = {
						type = infantry_equipment
						amount = 1000
					}
				}
			}

			#If prepared with surprise attack plan, get bonus
			if = {
				limit = {
					FROM = {
						original_tag = ROOT
						#has_civil_war = yes
						has_country_flag = formulated_surprise_attack_plan_for_civil_war
					}
					#has_civil_war = yes
				}
				FROM = {
					clr_country_flag = formulated_surprise_attack_plan_for_civil_war
					add_timed_idea = {
						idea = civil_war_surprise_attack_plan
						days = 30
					}
				}
			}
		}
	}
	
	# When a new faction is formed
	on_faction_formed = {
		effect = {
			news_event = { id = news.159 }
		}
	}
	
	# ROOT is capitulated country, FROM is winner
	on_capitulation = {
		effect = {
			news_event = { id = country_capitulated.0 days = 0 }
		}
	}

	# ROOT is previously capitulated country
	on_uncapitulation = {
		effect = {
		}
	}

	on_government_change = {
		effect = {			
		}
	}

	on_coup_succeeded = {
	### Handled in 99_converter_on_actions.txt
	}

	#ROOT is winner #FROM gets annexed - This will also fire on_annex
	on_civil_war_end = {
		effect = {


			#End of ideology Civil War
			if = {
				limit = {
					has_country_flag = ideology_civil_war
				}
				clr_country_flag = ideology_civil_war
				set_country_flag = { flag = won_ideology_civil_war value = 1 days = 365 }
				country_event = { id = generic.11 days = 1 }
			}
		}
	}

	#used when puppeting in a peace conference
	#ROOT = nation being puppeted, FROM = overlord
	
	on_puppet = {
		effect = {
		}
	}
	
	#used when puppeting through the occupied territories menu during peace time (or when releasing from non-core but owned territory, f.e. Britain releasing Egypt)
	#ROOT = nation being released, FROM = overlord
	
	on_release_as_puppet = {
		effect = {
		}
	}
	
	#ROOT is winner #FROM gets annexed - For civil wars on_civil_war_end is also fired
	on_annex = {
		effect = {
			
		}
	}

	#Not run on a specific country.
	on_startup = {
		effect = {
			
		}
	}
	
	on_unit_leader_created = {
		effect = {
		}
	}
	

	#ROOT = country that joined a war
	on_war = {
		effect = {
		}
	}
	#ROOT = attacking side
	#FROM = defending side
	#fired when two countries end up at war with each other (on_war is fired when a country goes to war against anyone and is not fired again when it enters war against another country unless it went to peace first)
	on_war_relation_added = {
		effect = {
		}
	}
	#ROOT - country that just went to peace
	on_peaceconference_ended = {
		effect = {
		}
	}

	#ROOT is new controller #FROM is old controller #FROM.FROM is state ID
	on_state_control_changed = {
		effect = {

			if = {
				limit = {
					FROM = {
						is_in_faction = yes
					}

					FROM.FROM = {
						has_state_flag = prevent_auto_flip_after_capitulation
					}
				}

				FROM.FROM = { clr_state_flag = prevent_auto_flip_after_capitulation }
				FROM = {
					set_state_controller = FROM.FROM
				}
				
			}
		}
	}
	
	on_unit_leader_level_up = {
		effect = {
			
		}
	}
	
	
	
	# From is owner country
	on_army_leader_daily = {
		effect = {
			if = {
				limit = {
					check_variable = { random < 0.02 }
					NOT = { has_trait = sick }
					set_temp_variable = { temp = sum_unit_terrain_modifier@sickness_chance }
					divide_temp_variable = { temp = num_units }
					check_variable = { temp > 0.75 }
					NOT = { has_unit_leader_flag = recently_sick }
				}
				add_timed_unit_leader_trait = {
					trait = sick
					days = 30
				}
				unit_leader_event = { id = generic.17 }
			}
		}
	}
	
	# From is owner country
	on_army_leader_won_combat = {
		effect = {
			if = {
				limit = {
					set_temp_variable = { chance = 0.001 }
					set_temp_variable = { factor = 1.0 }
					add_to_temp_variable = { factor = leader_modifier@wounded_chance_factor } 
					multiply_temp_variable = { chance = factor }
					check_variable = { random < chance }
					NOT = { has_trait = wounded }
				}
				add_timed_unit_leader_trait = {
					trait = wounded
					days = 90
				}
				unit_leader_event = { id = generic.18 }
			}
		}
	}
	
	# From is owner country
	on_army_leader_lost_combat = {
		effect = {
			if = {
				limit = {
					set_temp_variable = { chance = 0.005 }
					set_temp_variable = { factor = 1.0 }
					add_to_temp_variable = { factor = leader_modifier@wounded_chance_factor } 
					multiply_temp_variable = { chance = factor }
					check_variable = { random < chance }
					NOT = { has_trait = wounded }
				}
				add_timed_unit_leader_trait = {
					trait = wounded
					days = 90
				}
				unit_leader_event = { id = generic.18 }
			}
		}
	}
	
	on_army_leader_promoted = {
		effect = {
			add_timed_unit_leader_trait = {
				trait = recently_promoted
				days = 100
			}
		}
	}
	
	# root country that invades
	# scope state that is invaded
	# from scope state that the invasion started
	# on_naval_invasion = {
	# 	effect = {
	# 	}
	# }
	
	
	# root country that paradrops
	# scope state that is paradroped into
	# from scope state that the paradrop started
	on_paradrop = {
	    effect = {
		    set_country_flag = has_paradropped_flag
		}
	}
	on_ruling_party_change = { 
		# temp var old_ideology_token is available for effects
		effect = {
			every_controlled_state = {
				limit = {
					has_resistance = yes
				}
				set_temp_variable = { new_compliance = compliance }
				multiply_temp_variable = { new_compliance = 0.5 }
				set_compliance = new_compliance
			}
		}
	}

	on_unit_leader_promote_from_ranks_veteran = { #Unit leader scope, FROM is unit
		effect = {
			FROM = {
				add_random_valid_trait_from_unit = {
					character = ROOT
				}
			}
			set_unit_leader_flag = field_promotion_achievement
		}
	}

	on_unit_leader_promote_from_ranks_green = { #Unit leader scope, FROM is unit
		effect = {
			set_unit_leader_flag = field_promotion_achievement
		}
	}

	on_add_history = { #Unit Scope
		effect = {
			#add_unit_medal_to_latest_entry = {
			#	unit_medals = iron_cross_second_class
			#} #This would add a unit medal to the history entry you just received
		}
	}


	# From is owner country
	on_army_leader_daily = {
		effect = {
			if = {
				limit = {
					check_variable = { random < 0.02 }
					NOT = { has_trait = sick }
					set_temp_variable = { temp = sum_unit_terrain_modifier@sickness_chance }
					divide_temp_variable = { temp = num_units }
					check_variable = { temp > 0.75 }
					NOT = { has_unit_leader_flag = recently_sick }
				}
				add_timed_unit_leader_trait = {
					trait = sick
					days = 30
				}
				unit_leader_event = { id = generic.17 }
			}
		}
	}

	# From is owner country
	on_army_leader_won_combat = {
		effect = {
			if = {
				limit = {
					set_temp_variable = { chance = 0.001 }
					set_temp_variable = { factor = 1.0 }
					add_to_temp_variable = { factor = leader_modifier@wounded_chance_factor }
					multiply_temp_variable = { chance = factor }
					check_variable = { random < chance }
					NOT = { has_trait = wounded }
				}
				add_timed_unit_leader_trait = {
					trait = wounded
					days = 90
				}
				unit_leader_event = { id = generic.18 }
			}
		}
	}

	# From is owner country
	on_army_leader_lost_combat = {
		effect = {
			if = {
				limit = {
					set_temp_variable = { chance = 0.005 }
					set_temp_variable = { factor = 1.0 }
					add_to_temp_variable = { factor = leader_modifier@wounded_chance_factor }
					multiply_temp_variable = { chance = factor }
					check_variable = { random < chance }
					NOT = { has_trait = wounded }
				}
				add_timed_unit_leader_trait = {
					trait = wounded
					days = 90
				}
				unit_leader_event = { id = generic.18 }
			}
		}
	}

	on_army_leader_promoted = {
		effect = {
			add_timed_unit_leader_trait = {
				trait = recently_promoted
				days = 100
			}
		}
	}

	# root country that invades
	# scope state that is invaded
	# from scope state that the invasion started
	# on_naval_invasion = {
	# 	effect = {
	# 	}
	# }


	# root country that paradrops
	# scope state that is paradroped into
	# from scope state that the paradrop started
	on_paradrop = {
	    effect = {
		    set_country_flag = has_paradropped_flag
		}
	}
	on_ruling_party_change = {
		# temp var old_ideology_token is available for effects
		effect = {
			every_controlled_state = {
				limit = {
					has_resistance = yes
				}
				set_temp_variable = { new_compliance = compliance }
				multiply_temp_variable = { new_compliance = 0.5 }
				set_compliance = new_compliance
			}
		}
	}

	on_unit_leader_promote_from_ranks_veteran = { #Unit leader scope, FROM is unit
		effect = {
			FROM = {
				add_random_valid_trait_from_unit = {
					character = ROOT
				}
			}
			set_unit_leader_flag = field_promotion_achievement
		}
	}

	on_unit_leader_promote_from_ranks_green = { #Unit leader scope, FROM is unit
		effect = {
			set_unit_leader_flag = field_promotion_achievement
		}
	}

	on_add_history = { #Unit Scope
		effect = {
			#add_unit_medal_to_latest_entry = {
			#	unit_medals = iron_cross_second_class
			#} #This would add a unit medal to the history entry you just received
		}
	}

}
