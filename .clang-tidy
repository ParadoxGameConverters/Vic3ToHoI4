# Checks: "bugprone-*,cert-dcl21-cpp,cert-dcl50-cpp,cert-dcl58-cpp,cert-env33-c,cert-err33-c,cert-err34-c,cert-err52-cpp,cert-err60-cpp,cert-flp30-c,cert-mem57-cpp,cert-msc50-cpp,cert-msc51-cpp,cert-oop57-cpp,cert-oop58-cpp,clang-analyzer-*,concurrency-*,cppcoreguidelines-avoid-const-or-ref-data-members,cppcoreguidelines-avoid-goto,cppcoreguidelines-avoid-non-const-global-variables,cppcoreguidelines-init-variables,cppcoreguidelines-interfaces-global-init,cppcoreguidelines-macro-usage,cppcoreguidelines-narrowing-conversions,cppcoreguidelines-no-malloc,cppcoreguidelines-prefer-member-initializer,cppcoreguidelines-pro-bounds-array-to-pointer-decay,cppcoreguidelines-pro-bounds-constant-array-index,cppcoreguidelines-pro-bounds-pointer-arithmetic,cppcoreguidelines-pro-type-const-cast,cppcoreguidelines-pro-type-cstyle-cast,cppcoreguidelines-pro-type-member-init,cppcoreguidelines-pro-type-reinterpret-cast,cppcoreguidelines-pro-type-static-cast-downcast,cppcoreguidelines-pro-type-union-access,cppcoreguidelines-pro-type-vararg,cppcoreguidelines-slicing,cppcoreguidelines-special-member-functions,cppcoreguidelines-virtual-class-destructor,google-*,hicpp-*,llvm-*,misc-*,modernize-avoid-bind,modernize-avoid-c-arrays,modernize-concat-nested-namespaces,modernize-deprecated-headers,modernize-deprecated-ios-base-aliases,modernize-loop-convert,modernize-macro-to-enum,modernize-make-shared,modernize-make-unique,modernize-pass-by-value,modernize-raw-string-literal,modernize-redundant-void-arg,modernize-replace-auto-ptr,modernize-replace-disallow-copy-and-assign-macro,modernize-replace-random-shuffle,modernize-return-braced-init-list,modernize-shrink-to-fit,modernize-unary-static-assert,modernize-use-auto,modernize-use-bool-literals,modernize-use-default-member-init,modernize-use-emplace,modernize-use-equals-default,modernize-use-equals-delete,modernize-use-nodiscard,modernize-use-noexcept,modernize-use-nullptr,modernize-use-override,modernize-use-transparent-functors,modernize-use-uncaught-exceptions,modernize-use-using,performance-*,portability-*,readability-*"
Checks: '-*,readability-identifier-naming, modernize*, -modernize-use-trailing-return-type, -modernize-type-traits'
WarningsAsErrors: 'readability-identifier-naming, modernize*'
HeaderFilterRegex: ""
ExcludeHeaderFilterRegex: '.*external.*'
CheckOptions:
  - { key: readability-identifier-naming.AbstractClassCase,             value: CamelCase  }
  - { key: readability-identifier-naming.ClassCase,                     value: CamelCase  }
  - { key: readability-identifier-naming.ClassConstantCase,             value: CamelCase  }
  - { key: readability-identifier-naming.ClassConstantCasePrefix,       value: 'k'        }
  - { key: readability-identifier-naming.ClassMemberCase,               value: lower_case }
  - { key: readability-identifier-naming.ClassMethodCase,               value: CamelCase  }
  - { key: readability-identifier-naming.ConceptCase,                   value: CamelCase  }
  - { key: readability-identifier-naming.ConstantCase,                  value: CamelCase  }
  - { key: readability-identifier-naming.ConstantPrefix,                value: 'k'        }
  - { key: readability-identifier-naming.ConstantMemberCase,            value: lower_case }
  - { key: readability-identifier-naming.ConstantParameterCase,         value: lower_case }
  - { key: readability-identifier-naming.ConstantPointerParameterCase,  value: lower_case }
  - { key: readability-identifier-naming.ConstexprFunctionCase,         value: CamelCase  }
  - { key: readability-identifier-naming.ConstexprMethodCase,           value: CamelCase  }
  - { key: readability-identifier-naming.ConstexprVariableCase,         value: CamelCase  }
  - { key: readability-identifier-naming.ConstexprVariablePrefix,       value: 'k'        }
  - { key: readability-identifier-naming.EnumCase,                      value: CamelCase  }
  - { key: readability-identifier-naming.EnumConstantCase,              value: CamelCase  }
  - { key: readability-identifier-naming.EnumConstantPrefix,            value: 'k'        }
  - { key: readability-identifier-naming.FunctionCase,                  value: CamelCase  }
  - { key: readability-identifier-naming.GlobalConstantCase,            value: CamelCase  }
  - { key: readability-identifier-naming.GlobalConstantPrefix,          value: 'k'        }
  - { key: readability-identifier-naming.GlobalConstantPointerCase,     value: CamelCase  }
  - { key: readability-identifier-naming.GlobalConstantPointerPrefix,   value: 'k'        }
  - { key: readability-identifier-naming.GlobalFunctionCase,            value: CamelCase  }
  - { key: readability-identifier-naming.GlobalPointerCase,             value: lower_case }
  - { key: readability-identifier-naming.GlobalVariableCase,            value: lower_case }
  - { key: readability-identifier-naming.InlineNamespaceCase,           value: lower_case }
  - { key: readability-identifier-naming.LocalConstantCase,             value: lower_case }
  - { key: readability-identifier-naming.LocalConstantPointerCase,      value: lower_case }
  - { key: readability-identifier-naming.LocalPointerCase,              value: lower_case }
  - { key: readability-identifier-naming.LocalVariableCase,             value: lower_case }
  - { key: readability-identifier-naming.MacroDefinitionCase,           value: UPPER_CASE }
  - { key: readability-identifier-naming.MemberCase,                    value: lower_case }
  - { key: readability-identifier-naming.MethodCase,                    value: CamelCase  }
  - { key: readability-identifier-naming.NamespaceCase,                 value: lower_case }
  - { key: readability-identifier-naming.ParameterCase,                 value: lower_case }
  - { key: readability-identifier-naming.ParameterPackCase,             value: lower_case }
  - { key: readability-identifier-naming.PointerParameterCase,          value: lower_case }
  - { key: readability-identifier-naming.PrivateMemberCase,             value: lower_case }
  - { key: readability-identifier-naming.PrivateMemberSuffix,           value: '_'        }
  - { key: readability-identifier-naming.PrivateMethodCase,             value: CamelCase  }
  - { key: readability-identifier-naming.ProtectedMemberCase,           value: lower_case }
  - { key: readability-identifier-naming.ProtectedMemberSuffix,         value: '_'        }
  - { key: readability-identifier-naming.ProtectedMethodCase,           value: CamelCase  }
  - { key: readability-identifier-naming.PublicMemberCase,              value: lower_case }
  - { key: readability-identifier-naming.PublicMethodCase,              value: CamelCase  }
  - { key: readability-identifier-naming.ScopedEnumConstantCase,        value: CamelCase  }
  - { key: readability-identifier-naming.ScopedEnumConstantPrefix,      value: 'k'        }
  - { key: readability-identifier-naming.StaticConstantCase,            value: CamelCase  }
  - { key: readability-identifier-naming.StaticConstantPrefix,          value: 'k'        }
  - { key: readability-identifier-naming.StaticVariableCase,            value: lower_case }
  - { key: readability-identifier-naming.StructCase,                    value: CamelCase  }
  - { key: readability-identifier-naming.TemplateParameterCase,         value: lower_case }
  - { key: readability-identifier-naming.TemplateTemplateParameterCase, value: lower_case }
  - { key: readability-identifier-naming.TypeAliasCase,                 value: CamelCase  }
  - { key: readability-identifier-naming.TypedefCase,                   value: CamelCase  }
  - { key: readability-identifier-naming.TypeTemplateParameterCase,     value: CamelCase  }
  - { key: readability-identifier-naming.UnionCase,                     value: CamelCase  }
  - { key: readability-identifier-naming.ValueTemplateParameterCase,    value: lower_case }
  - { key: readability-identifier-naming.VariableCase,                  value: lower_case }
  - { key: readability-identifier-naming.VirtualMethodCase,             value: CamelCase  }